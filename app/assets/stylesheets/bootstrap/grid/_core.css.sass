@function modular-scale($value, $increment, $ratio)
  @if $increment > 0
    @for $i from 1 through $increment
      $value: ($value * $ratio)

  @if $increment < 0
    $increment: abs($increment)
    @for $i from 1 through $increment
      $value: ($value / $ratio)

  @return $value


@function golden-ratio($value, $increment)
  @return modular-scale($value, $increment, $golden)

$golden: 1.618
$column: golden-ratio(1em, 3) !default
$gutter: golden-ratio(1em, 1) !default
$parent-columns: $grid-columns !default
$fg-column: $column
$fg-gutter: $gutter
$fg-max-columns: $grid-columns
$container-display-table: false !default
$layout-direction: nil !default


// Create the grid for a given size
// This will loop over the number of columns and create a css class
// for each. If it's the last gride size, then let's not add a float
@mixin grid-core($size)
  @for $i from 1 through $grid-columns
    .col-#{$size}-#{$i}
      // Ignore float for the largest grid size
      @if $i < $grid-columns
        float: left
      @include span-columns($i)

    // If it's not the screen-xs, then let's add push and pull helper classes
    @if $size != "xs"
      .col-#{$size}-push-#{$i}
        left: flex-grid($i, $grid-columns) + flex-gutter($grid-columns)
      .col-#{$size}-pull-#{$i}
        right: flex-grid($i, $grid-columns) + flex-gutter($grid-columns)


    // Create the collapse classes, i.e., .col-lg-collapse-2
    // .col-#{$size}-collapse-#{$i}
    //   // @include span-columns($i, gutterless)
    //   @include span-columns-gutterless($i)


    // Offsetting, i.e., .col-sm-offset-2
    // .col-#{$size}-offset-#{$i}
    //   @include shift($i)

  // Create columns centering for the given size
  .col-#{$size}-centered
    margin-left: auto !important
    margin-right: auto !important
    float: none !important




@mixin span-columns($span: $columns of $container-columns)
  $columns: nth($span, 1)
  $container-columns: container-span($span)

  margin-right: flex-gutter($container-columns)
  width: flex-grid($columns, $container-columns)

  &:last-child
    margin-right: 0
   


// Parses the first argument of span-columns()
@function container-span($span: $span)
  @if length($span) == 3
    $container-columns: nth($span, 3)
    @return $container-columns

  @else if length($span) == 2
    $container-columns: nth($span, 2)
    @return $container-columns

  @else
    @return $grid-columns



@function flex-grid($columns, $container-columns: $fg-max-columns)
  $width: $columns * $fg-column + ($columns - 1) * $fg-gutter
  $container-width: $container-columns * $fg-column + ($container-columns - 1) * $fg-gutter
  @return percentage($width / $container-width)


@function flex-gutter($container-columns: $fg-max-columns, $gutter: $fg-gutter)
  $container-width: $container-columns * $fg-column + ($container-columns - 1) * $fg-gutter
  @return percentage($gutter / $container-width)





// Omega Core builder
@mixin omega-core($size)
  @for $i from 1 through $grid-columns
    .omega-#{$size}-#{$i}
      [class^="col-"],
      [class*=" col-"]
        @include omega(#{$i}n)



